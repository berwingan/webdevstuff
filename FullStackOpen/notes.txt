const Farm(props)=>{
    x
    x
    x
    return(
        <> or <Fragments> 
    )
}

<Farm text={aasd} anim={()=>function()} />
arrays =find,filter,map

props.map(note=> <li>{note.content}</li>)
props.map((notes,i)=> <Parts key={notes.id} note={notes})  <-- never use i for the key

2b: Forms
const addNote=(event)=>{
event.preventDefault()
console.log('button clicked',event.target)
}

<form onSubmit={addNote}>
<input />
<button type="submit">save</button>
</form>

--controlled components
never mutate state directly

db.json - axios library
npm install axios
npm install json-server --save-dev
"server": "json-server -p3001 --watch db.json"
npm run server

  const hook = () => {
    console.log("effect");
    axios
      .get("http://localhost:3001/notes")
      .then((response) => {
        console.log("promise fulfilled");
        setNotes(response.data);
      })
      .catch(error=>{
        console.log('fail ${}')
      })
  };
  useEffect(hook, []);

  .post --add new note
  .puut -- replace existing note


axios
  .put 
  .then
  .then

Part3- Backend
NodeJS & Express 
npm init
    "start": "node index.js" <-- in the package.json
run using 
node index.js
npm install express 

response.send
response.json
nodemon-- changes to application code now cause server restart
npm install --save-dev nodemon
node_modules/.bin/nodemon index.js
add ("dev": "nodemon index.js",) to package.json
npm run dev 
postman

----
const express = require("express");
const app = express();
app.use(express.json());
...
const PORT = 3001;
app.listen(PORT);
console.log(`Server running on port ${PORT}`);
----

